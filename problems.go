package main

import (
	"fmt"
)

/*
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.
*/
func problem1() int {
	var value = 0

	for i := 3; i < 1000; i++ {
		if i%3 == 0 || i%5 == 0 {
			value += i
		}
	}

	return value
}

/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/
func Problem2() int {
	var value = 0

	for i, v := 0, 1; v < 4000000; {
		var sum = i + v

		fmt.Printf("%d, %d, %d\n", i, v, sum)

		if sum%2 == 0 {
			value += sum
			fmt.Printf("value: %d\n", value)
		}

		i, v = v, sum
	}

	return value
}

/*
The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?
*/
func Problem3() int {
	var value = 0
	var num = 600851475143

	for _, element := range FactorsOf(num) {
		fmt.Printf("%d, %t\n", element, IsPrime(element))
	}

	return value
}
